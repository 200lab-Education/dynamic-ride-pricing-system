import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import requests
import json
from datetime import datetime
import time

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Dynamic Ride Pricing Dashboard",
    page_icon="üöï",
    layout="wide"
)

# Ti√™u ƒë·ªÅ
st.title("üöï Dashboard Dynamic Pricing cho ·ª®ng d·ª•ng ƒê·∫∑t Xe")

# K·∫øt n·ªëi t·ªõi API
API_URL = "http://localhost:5001/api"

def get_health():
    try:
        response = requests.get(f"{API_URL}/health")
        return response.json()
    except:
        return {"status": "error", "pricing_system": "not_connected"}

def get_pricing_factors():
    try:
        response = requests.get(f"{API_URL}/pricing-factors")
        return response.json()
    except:
        return {}

def simulate_rides(n_rides=5):
    try:
        response = requests.get(f"{API_URL}/simulate-rides", params={"n_rides": n_rides})
        return response.json()
    except:
        return []

def get_price(ride_params):
    try:
        response = requests.post(f"{API_URL}/get-price", json=ride_params)
        return response.json()
    except Exception as e:
        st.error(f"L·ªói khi g·ªçi API: {str(e)}")
        return {"error": str(e)}

# Ki·ªÉm tra k·∫øt n·ªëi
health = get_health()
if health["status"] == "healthy":
    st.sidebar.success("‚úÖ K·∫øt n·ªëi ƒë·∫øn API th√†nh c√¥ng")
else:
    st.sidebar.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. H√£y ch·∫Øc ch·∫Øn server ƒëang ch·∫°y.")
    st.stop()

# Sidebar
st.sidebar.header("ƒêi·ªÅu ch·ªânh tham s·ªë")

tab1, tab2 = st.tabs(["Gi·∫£ l·∫≠p", "M√¥ ph·ªèng theo tham s·ªë"])

with tab1:
    st.header("Gi·∫£ l·∫≠p nhi·ªÅu chuy·∫øn xe")
    
    # S·ªë l∆∞·ª£ng chuy·∫øn ƒë·ªÉ gi·∫£ l·∫≠p
    n_rides = st.slider("S·ªë l∆∞·ª£ng chuy·∫øn ƒë·ªÉ gi·∫£ l·∫≠p", 1, 20, 5)
    
    if st.button("Ch·∫°y gi·∫£ l·∫≠p"):
        with st.spinner("ƒêang t√≠nh to√°n gi√° cho c√°c chuy·∫øn xe..."):
            rides_data = simulate_rides(n_rides)
            
        if rides_data:
            # Hi·ªÉn th·ªã d·ªØ li·ªáu
            st.subheader(f"K·∫øt qu·∫£ gi·∫£ l·∫≠p {len(rides_data)} chuy·∫øn xe")
            
            # Chuy·ªÉn ƒë·ªïi v·ªÅ DataFrame ƒë·ªÉ d·ªÖ l√†m vi·ªác
            df = pd.DataFrame(rides_data)
            
            # Hi·ªÉn th·ªã th·ªëng k√™
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Gi√° trung b√¨nh", f"{df['optimal_price'].mean():,.0f}ƒë")
            with col2:
                st.metric("% thay ƒë·ªïi trung b√¨nh", f"{df['price_percent_change'].mean():.1f}%")
            with col3:
                vehicle_counts = df['vehicle_type'].value_counts()
                st.metric("Lo·∫°i xe ph·ªï bi·∫øn nh·∫•t", df['vehicle_type'].mode()[0])
            
            # Bi·ªÉu ƒë·ªì
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
            
            # Bi·ªÉu ƒë·ªì % thay ƒë·ªïi gi√°
            sns.histplot(df['price_percent_change'], bins=10, kde=True, ax=ax1)
            ax1.axvline(0, color='red', linestyle='--')
            ax1.set_title("Ph√¢n b·ªë % thay ƒë·ªïi gi√°")
            ax1.set_xlabel("% thay ƒë·ªïi gi√°")
            
            # Bi·ªÉu ƒë·ªì gi√° theo lo·∫°i xe
            sns.boxplot(x='vehicle_type', y='optimal_price', data=df, ax=ax2)
            ax2.set_title("Gi√° theo lo·∫°i xe")
            ax2.set_xlabel("Lo·∫°i xe")
            ax2.set_ylabel("Gi√° (ƒë·ªìng)")
            
            st.pyplot(fig)
            
            # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
            st.subheader("Chi ti·∫øt c√°c chuy·∫øn xe")
            st.dataframe(df)

with tab2:
    st.header("M√¥ ph·ªèng theo tham s·ªë")
    
    col1, col2 = st.columns(2)
    
    with col1:
        distance = st.slider("Kho·∫£ng c√°ch (km)", 1.0, 30.0, 5.0, 0.5)
        vehicle_type = st.selectbox(
            "Lo·∫°i ph∆∞∆°ng ti·ªán",
            options=[
                {"value": 0, "label": "Xe m√°y"},
                {"value": 1, "label": "Xe 4 ch·ªó"},
                {"value": 2, "label": "Xe 7 ch·ªó"},
                {"value": 3, "label": "Xe sang"}
            ],
            format_func=lambda x: x["label"]
        )
        
        weather = st.selectbox(
            "ƒêi·ªÅu ki·ªán th·ªùi ti·∫øt",
            options=[
                {"value": 0, "label": "T·ªët"},
                {"value": 1, "label": "M∆∞a"},
                {"value": 2, "label": "M∆∞a to"}
            ],
            format_func=lambda x: x["label"]
        )
    
    with col2:
        traffic = st.slider("M·ª©c ƒë·ªô t·∫Øc ngh·∫Ωn (0-10)", 0, 10, 3)
        drivers = st.slider("S·ªë t√†i x·∫ø c√≥ s·∫µn", 1, 50, 10)
        demand = st.slider("Nhu c·∫ßu khu v·ª±c (0-100)", 0, 100, 50)
        
        user_info = st.toggle("Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng")
        
        if user_info:
            user_rating = st.slider("ƒê√°nh gi√° ng∆∞·ªùi d√πng", 1.0, 5.0, 4.5, 0.1)
            user_rides = st.slider("S·ªë chuy·∫øn ƒëi tr∆∞·ªõc ƒë√¢y", 0, 100, 5)
        else:
            user_rating = 4.5
            user_rides = 5
    
    if st.button("T√≠nh gi√°"):
        ride_params = {
            "distance_km": distance,
            "duration_min": distance * 3,  # ∆Ø·ªõc t√≠nh th·ªùi gian
            "weather_condition": weather["value"],
            "traffic_level": traffic,
            "available_drivers": drivers,
            "area_demand": demand,
            "vehicle_type": vehicle_type["value"],
            "user_rating": user_rating,
            "user_previous_rides": user_rides
        }
        
        with st.spinner("ƒêang t√≠nh to√°n gi√°..."):
            result = get_price(ride_params)
            
        if "error" in result:
            st.error(f"L·ªói: {result['error']}")
        else:
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.subheader("K·∫øt qu·∫£ t√≠nh gi√°")
            
            # C√°c th√¥ng s·ªë ch√≠nh
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Gi√° c∆° b·∫£n", f"{result['base_price']:,.0f}ƒë")
            with col2:
                st.metric("Gi√° t·ªëi ∆∞u", f"{result['optimal_price']:,.0f}ƒë")
            with col3:
                color = "normal"
                if result['price_percent_change'] > 0:
                    color = "off"
                else:
                    color = "inverse"
                st.metric("% thay ƒë·ªïi gi√°", f"{result['price_percent_change']:.1f}%", delta_color=color)
            
            # Hi·ªÉn th·ªã insights
            st.subheader("Ph√¢n t√≠ch gi√°")
            for insight in result['insights']:
                st.info(insight)

# Hi·ªÉn th·ªã c√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn gi√°
st.sidebar.header("Y·∫øu t·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn gi√°")
pricing_factors = get_pricing_factors()

if pricing_factors:
    with st.sidebar.expander("Y·∫øu t·ªë c∆° b·∫£n"):
        for factor in pricing_factors.get('base_factors', []):
            st.write(f"- {factor}")
            
    with st.sidebar.expander("Y·∫øu t·ªë ƒë·ªông"):
        for factor in pricing_factors.get('dynamic_factors', []):
            st.write(f"- {factor}")
            
    with st.sidebar.expander("ƒêi·ªÅu ki·ªán ƒë·∫∑c bi·ªát"):
        for factor in pricing_factors.get('special_conditions', []):
            st.write(f"- {factor}")

# Footer
st.sidebar.markdown("---")
st.sidebar.caption("Demo Dynamic Pricing - Phi√™n b·∫£n 1.0")
st.sidebar.caption(f"C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
